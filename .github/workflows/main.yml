name: CI

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  static-analysis:
    runs-on: ubuntu-20.04
    timeout-minutes: 10

    steps:
      - name: Project Checkout
        uses: actions/checkout@v3.0.2

      - name: Check code formatting
        run: ./scripts/static-analysis.sh all

  unit-tests:
    runs-on: ubuntu-20.04
    timeout-minutes: 10

    steps:
      - name: Project Checkout
        uses: actions/checkout@v3.0.2

      - name: Setup Android Build
        uses: ./.github/actions/setup-android-build
        with:
          norris-key: ${{ secrets.NORRIS_CRYPTO_KEY }}

      - name: Run unit tests
        run: ./gradlew test

      - name: Collect all test results from all modules
        if: always()
        run: ./scripts/aggregate-test-reports.sh build/test-reports

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-tests-reports
          path: build/test-reports

  assemble-apk:
    runs-on: ubuntu-20.04
    timeout-minutes: 10

    steps:
      - name: Project Checkout
        uses: actions/checkout@v3.0.2

      - name: Setup Android Build
        uses: ./.github/actions/setup-android-build
        with:
          norris-key: ${{ secrets.NORRIS_CRYPTO_KEY }}

      - name: Assemble production APK
        run: ./gradlew app:assembleRelease -PtestMode=true

      - name: Archive APK
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: app/build/outputs/apk/release

      - name: Archive R8 mappings
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: release-mappings
          path: app/build/outputs/mapping/release

  espresso-prepare:
    runs-on: ubuntu-20.04
    timeout-minutes: 10

    steps:
      - name: Project Checkout
        uses: actions/checkout@v3.0.2

      - name: Setup Android Build
        uses: ./.github/actions/setup-android-build
        with:
          norris-key: ${{ secrets.NORRIS_CRYPTO_KEY }}

      - name: Assemble Instrumentation tests
        run: ./gradlew assembleAndroidTest -PtestMode=true

      - name: Archive Test APK
        uses: actions/upload-artifact@v3
        with:
          name: test-apks
          path: |
            app/build/outputs/apk/androidTest/release
            features/**/build/outputs/apk/androidTest/debug

  acceptance-tests:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    needs: [assemble-apk, espresso-prepare, unit-tests, static-analysis]
    strategy:
      fail-fast: true
      matrix:
        device: [ 'NexusLowRes', 'Pixel2' ]

    steps:
      - name: Fetch Instrumentation artefacts
        uses: actions/download-artifact@v3

      - name: Run Espresso tests with emulator.wtf
        uses: emulator-wtf/run-tests@v0.0.10
        with:
          api-token: ${{ secrets.EMULATOR_WTF_TOKEN }}
          app: release-apk/app-release.apk
          test: test-apks/app/build/outputs/apk/androidTest/release/app-release-androidTest.apk
          outputs-dir: emulator-wtf-results
          devices: model=${{ matrix.device }},version=31,atd=true
          use-orchestrator: true
          clear-package-data: true

      - name: Archive execution results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: acceptance-tests-reports
          path: emulator-wtf-results

  screenshot-tests:
    strategy:
      fail-fast: false
      matrix:
        module: ['facts', 'search']

    runs-on: ubuntu-20.04
    timeout-minutes: 15
    needs: [assemble-apk, espresso-prepare, unit-tests, static-analysis]

    steps:
      - name: Fetch Instrumentation artefacts
        uses: actions/download-artifact@v3

      - name: Run screenshot tests over emulator.wtf
        uses: emulator-wtf/run-tests@v0.0.10
        with:
          api-token: ${{ secrets.EMULATOR_WTF_TOKEN }}
          app: release-apk/app-release.apk
          test: test-apks/features/${{ matrix.module }}/build/outputs/apk/androidTest/debug/${{ matrix.module }}-debug-androidTest.apk
          outputs-dir: emulator-wtf-results
          devices: model=Pixel2,version=31
          use-orchestrator: true
          clear-package-data: true

      - name: Archive execution results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.module }}-screenshot-tests-reports
          path: emulator-wtf-results

  security-analysis:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: assemble-apk
    steps:
      - name: Project Checkout
        uses: actions/checkout@v3.0.2

      - name: Setup Android Build
        uses: ./.github/actions/setup-android-build
        with:
          norris-key: ${{ secrets.NORRIS_CRYPTO_KEY }}

      - name: Check security issues in project dependencies and generate SBOM
        run: ./gradlew clean ossIndexAudit

      - name: Archive CycloneDx SBOM
        uses: actions/upload-artifact@v3
        with:
          name: cyclonedx-sbom
          path: ./oss-index-cyclonedx-bom.json

      - name: Fetch APK from previous build
        uses: actions/download-artifact@v3

      - name: Analyse APK with AppSweep
        uses: guardsquare/appsweep-action@main
        env:
          APPSWEEP_API_KEY: ${{ secrets.APP_SWEEP_TOKEN }}
          COMMIT_HASH: ${{ steps.vars.outputs.sha_short }}
          INPUT_FILE: release-apk/app-release.apk
          MAPPING_FILE: release-mappings/mapping.txt

  test-results-analysis:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: [acceptance-tests, screenshot-tests]
    steps:
      - name: Fetch all artefacts
        uses: actions/download-artifact@v3

      - name: Copy all test results
        run: mkdir all-reports && mv *-tests-reports/ all-reports

      - name: Analysis test results
        if: always()
        uses: runforesight/foresight-test-kit-action@v1.1.1
        with:
          api_key: ${{ secrets.FORESIGHT_API_KEY }}
          test_format: JUNIT
          test_framework: JUNIT
          test_path: all-reports
